chisq.test(x[,"Apr"], x[, "Nov"], correct=FALSE)
chisq.test(sum(x[,"Apr"]), sum(x[, "Nov"]), correct=FALSE)
chisq.test(c(sum(x[,"Apr"]), sum(x[, "Nov"])), correct=FALSE)
fisher.test(x, alternative="greater")
fisher.test(x, alternative="greater")$p.value
phyper(5-1, 6, 4, 6, lower.tail=FALSE)
fisher.test(x, alternative="greater")$p.value
phyper(5-1, 6, 4, 6, lower.tail=FALSE)
fisher.test(x, alternative="greater")$p.value
phyper(5-1, 6, 4, 6, lower.tail=FALSE)
fisher.test(x, alternative="greater")
x <- data.frame(matrix(c(24, 37, 39, 5), nrow=2, ncol=2))
colnames(x) <- c("Apr", "Nov")
rownames(x) <- c("HG", "LB")
phyper(5-1, 6, 4, 6, lower.tail=FALSE)
fisher.test(x, alternative="greater")
phyper(5-1, 6, 4, 6, lower.tail=FALSE)
mat <- data.frame(matrix(c(24, 37, 39, 5), nrow=2, ncol=2, dimnames=list(month=c("Apr","Nov"), species=c("HG","LB"))))
fisher.test(mat, alternative="greater")
fisher.test(mat)
phyper(5-1, 6, 4, 6, lower.tail=FALSE)
mat <- data.frame(matrix(c(24, 37, 39, 5), nrow=2, ncol=2, dimnames=list(month=c("Apr","Nov"), species=c("HG","LB"))))
fisher.test(mat)
phyper(5-1, 6, 4, 6, lower.tail=FALSE)
mat <- data.frame(matrix(c(24, 37, 39, 5), nrow=2, ncol=2, dimnames=list(month=c("Apr","Nov"), species=c("HG","LB"))))
fisher.test(mat)
fisher.test(mat, alternative="less")
fisher.test(mat, alternative="greater")
phyper(5-1, 6, 4, 6, lower.tail=FALSE)
mat <- data.frame(matrix(c(24, 37, 39, 5), nrow=2, ncol=2, dimnames=list(month=c("Apr","Nov"), species=c("HG","LB"))))
fisher.test(mat, alternative="greater")
View(mat)
phyper(5-1, 63, 42, 6, lower.tail=FALSE)
mat <- data.frame(matrix(c(24, 37, 39, 5), nrow=2, ncol=2, dimnames=list(species=c("HG","LB"), month=c("Apr","Nov"))))
fisher.test(mat, alternative="greater")
mat <- data.frame(matrix(c(24, 37, 39, 5), nrow=2, ncol=2, dimnames=list(species=c("HG","LB"), month=c("Apr","Nov"))))
x <- data.frame(mat)
# Basic Calculation
X2HGApr <- (x["HG","Apr"]-(sum(x["HG",])*sum(x[,"Apr"])/sum(x)))**2/(sum(x["HG",])*sum(x[,"Apr"])/sum(x))
X2LBApr <- (x["LB","Apr"]-(sum(x["LB",])*sum(x[,"Apr"])/sum(x)))**2/(sum(x["LB",])*sum(x[,"Apr"])/sum(x))
X2HGNov <- (x["HG","Nov"]-(sum(x["HG",])*sum(x[,"Nov"])/sum(x)))**2/(sum(x["HG",])*sum(x[,"Nov"])/sum(x))
X2LBNov <- (x["LB","Nov"]-(sum(x["LB",])*sum(x[,"Nov"])/sum(x)))**2/(sum(x["LB",])*sum(x[,"Nov"])/sum(x))
X2 <- X2HGApr + X2LBApr + X2HGNov + X2LBNov
X2
1 - pchisq(X2, df=1)
# Verify
chisq.test(x, correct=FALSE)
View(x)
View(mat)
choose(24,63)*choose(37, 42)
phyper(24-1, 63, 42, 105, lower.tail=FALSE)
fisher.test(mat, alternative="greater")
choose(24,63)*choose(37, 42)
phyper(24-1, 63, 42, 105)
fisher.test(mat, alternative="greater")
choose(24,63)*choose(37, 42)
phyper(24-1, 63, 42, 61, lower.tail=FALSE)
fisher.test(mat, alternative="greater")
choose(24,63)*choose(37, 42)
phyper(24-1, 63, 42, 61, lower.tail=FALSE)
fisher.test(mat, alternative="greater")
phyper(24-1, 63, 42, 61)
choose(24,63)*choose(37, 42)/choose(61, 44)
choose(24,63)
choose(63,24)*choose(42, 37)/choose(105, 61)
phyper(24-1, 63, 42, 61, lower.tail=FALSE)
phyper(24-1, 63, 142, 61, lower.tail=FALSE)
phyper(24-1, 63, 42, 61, lower.tail=FALSE)
phyper(24-1, 63, 42, 61)
, lower.tail=FALSE
phyper(24-1, 63, 42, 61, lower.tail=FALSE)
fisher.test(mat, alternative="greater")
phyper(38, 63, 42, 44, lower.tail=FALSE)
choose(63,24)*choose(42, 37)/choose(105, 61)
phyper(23, 63, 42, 61, lower.tail=FALSE)
phyper(38, 63, 42, 44, lower.tail=FALSE)
fisher.test(mat, alternative="greater")
phyper(23, 63, 42, 61, lower.tail=FALSE)
choose(63,39)*choose(42, 5)/choose(105, 44)
phyper(39, 63, 42, 44, lower.tail=FALSE)
fisher.test(mat, alternative="greater")
choose(63,39)*choose(42, 5)/choose(105, 44)
phyper(39, 63, 42, 44, lower.tail=FALSE)
fisher.test(mat)
choose(63,39)*choose(42, 5)/choose(105, 44)
phyper(39, 63, 42, 44, lower.tail=FALSE)
fisher.test(mat, alternative = "less")
phyper(39, 63, 42, 44)
choose(63,39)*choose(42, 5)/choose(105, 44)
phyper(39, 63, 42, 44)
fisher.test(mat, alternative = "less")
choose(63,39)*choose(42, 5)/choose(105, 44)
choose(63,39)*choose(42, 5)/choose(105, 44)
phyper(39, 63, 42, 44)
fisher.test(mat, alternative = "less")
choose(63,39)*choose(42, 5)/choose(105, 44)
phyper(39, 63, 42, 44)
fisher.test(mat, alternative = "less")
phyper(39, 63, 42, 44, lower.tail = "less")
choose(63,39)*choose(42, 5)/choose(105, 44)
phyper(39, 63, 42, 44, lower.tail = "less")
fisher.test(mat, alternative = "less")
phyper(39, 63, 42, 44, lower.tail = "less")
phyper(39, 63, 42, 44, lower.tail = "greater")
phyper(39, 63, 42, 44, lower.tail = "greater")
fisher.test(mat, alternative = "less")
phyper(39, 63, 42, 44, lower.tail = "greater")
phyper(39, 63, 42, 44, lower.tail = "FALSE")
fisher.test(mat, alternative = "greater")
phyper(20, 63, 42, 44, lower.tail = "FALSE")
phyper(21, 63, 42, 44, lower.tail = "FALSE")
(choose(6,6) + choose(6,5) * choose(4,1)) / choose(10,6)
ls = c(39, 40, 41, 42, 43, 44)
for (t in ls){
p = p + choose(63,t)*choose(42, 44-t)/choose(105, 44)
}
ls = c(39, 40, 41, 42, 43, 44)
p = 0
for (t in ls){
p = p + choose(63,t)*choose(42, 44-t)/choose(105, 44)
}
ls = c(39, 40, 41, 42, 43, 44)
p = 0
for (t in ls){
p = p + choose(63,t)*choose(42, 44-t)/choose(105, 44)
}
print(p)
phyper(39, 63, 42, 44)
lower.tail = "FALSE"
phyper(39, 63, 42, 44, lower.tail = "FALSE")
phyper(39, 63, 42, 44, lower.tail = "FALSE")
fisher.test(mat, alternative = "greater")
phyper(38, 63, 42, 44, lower.tail = "FALSE")
dhyper(38, 63, 42, 44, lower.tail = "FALSE")
dhyper(38, 63, 42, 44)
dhyper(39, 63, 42, 44)
1-dhyper(39, 63, 42, 44)
choose(63,39)*choose(42, 5)/choose(105, 44)
phyper(38, 63, 42, 44, lower.tail = "FALSE")
fisher.test(mat, alternative = "greater")
choose(63,39)*choose(42, 5)/choose(105, 44)
phyper(5, 42, 63, 44)
fisher.test(mat, alternative = "greater")
choose(63,39)*choose(42, 5)/choose(105, 44)
phyper(38, 63, 42, 44)
fisher.test(mat, alternative = "greater")
phyper(38, 63, 42, 44, lower.tail = "FALSE")
phyper(38, 63, 42, 44, lower.tail = "FALSE")
choose(63,39)*choose(42, 5)/choose(105, 44)
phyper(38, 63, 42, 44, lower.tail = "FALSE")
fisher.test(mat, alternative = "greater")
choose(63,39)*choose(42, 5)/choose(105, 44)
phyper(38, 63, 42, 44, lower.tail = "FALSE")
fisher.test(mat, alternative = "greater")
phyper(38, 63, 42, 44)
phyper(38, 63, 42, 44, lower.tail = "FALSE")
1- phyper(38, 63, 42, 44)
fisher.test(mat, alternative = "greater")$p.value
choose(63,39)*choose(42, 5)/choose(105, 44)
1- phyper(38, 63, 42, 44)
fisher.test(mat, alternative = "greater")
fisher.test(mat, alternative = "less")
choose(63,39)*choose(42, 5)/choose(105, 44)
1- phyper(38, 63, 42, 44)
fisher.test(mat, alternative = "less")
ls = c(39, 40, 41, 42, 43, 44)
p = 0
for (t in ls){
p = p + choose(63,t)*choose(42, 44-t)/choose(105, 44)
}
print(p)
phyper(5, 42, 63, 44)
ls = c(39, 40, 41, 42, 43, 44)
p = 0
for (t in ls){
p = p + choose(63,t)*choose(42, 44-t)/choose(105, 44)
}
print(p)
phyper(5, 42, 63, 44)
1 - phyper(38, 63, 42, 44)
fisher.test(mat, alternative = "less")
pls = list(24, 37, 39, 5)
pls = pls/sum(pls)
pls = c(24, 37, 39, 5)
pls = pls/sum(pls)
print(pls)
# Likelihood ratio test
logpls = log(pls)
logls
logpls
2**logpls
e**logpls
exp(logpls)
library(stats4)
yls = c(24, 37, 39, 5)
# MLE without restrctions
pls = yls/sum(yls)
print(pls)
# Likelihood ratio test
G = 2(yls*log(pls) - yls*log(c(0.25, 0.25, 0.25, 0.25)))
library(stats4)
yls = c(24, 37, 39, 5)
# MLE without restrctions
pls = yls/sum(yls)
print(pls)
# Likelihood ratio test
G = 2(sum(yls*log(pls)) - sum(yls*log(c(0.25, 0.25, 0.25, 0.25))))
sum(yls*log(pls))
sum(yls*log(c(0.25, 0.25, 0.25, 0.25)))
sum(yls*log(c(0.25, 0.25, 0.25, 0.25)))
sum(yls*log(pls))
sum(yls*log(c(0.25, 0.25, 0.25, 0.25)))
library(stats4)
yls = c(24, 37, 39, 5)
# MLE without restrctions
pls = yls/sum(yls)
print(pls)
# Likelihood ratio test
plseq = c(0.25, 0.25, 0.25, 0.25)
G = 2(sum(yls*log(pls)) - sum(yls*log(plseq)))
# Likelihood ratio test
plseq = c(0.25, 0.25, 0.25, 0.25)
yls = c(24, 37, 39, 5)
# MLE without restrctions
pls = yls/sum(yls)
print(pls)
# Likelihood ratio test
plseq = c(0.25, 0.25, 0.25, 0.25)
theta1 = sum(yls*log(pls))
theta2 = sum(yls*log(plseq))
G = 2(theta1 - theta2)
Gtheta = 2(theta1 - theta2)
Gtheta = 2*(theta1 - theta2)
pchisq(G, df=4)
library(stats4)
yls = c(24, 37, 39, 5)
# MLE without restrctions
pls = yls/sum(yls)
print(pls)
# Likelihood ratio test
plseq = c(0.25, 0.25, 0.25, 0.25)
G = 2*(sum(yls*log(pls)) - sum(yls*log(plseq)))
pchisq(G, df=4)
library(stats4)
yls = c(24, 37, 39, 5)
# MLE without restrctions
pls = yls/sum(yls)
print(pls)
# Likelihood ratio test
plseq = c(0.25, 0.25, 0.25, 0.25)
G = 2*(sum(yls*log(pls)) - sum(yls*log(plseq)))
pchisq(G, df=4, lower.tail=FALSE)
library(stats4)
yls = c(24, 37, 39, 5)
# MLE without restrctions
pls = yls/sum(yls)
print(pls)
# Likelihood ratio test
plseq = c(0.25, 0.25, 0.25, 0.25)
G = 2*(sum(yls*log(pls)) - sum(yls*log(plseq)))
pchisq(G, df=4)
mat <- data.frame(matrix(c(24, 37, 39, 5), nrow=2, ncol=2, dimnames=list(species=c("HG","LB"), month=c("Apr","Nov"))))
x <- data.frame(mat)
# Basic Calculation
X2HGApr <- (x["HG","Apr"]-(sum(x["HG",])*sum(x[,"Apr"])/sum(x)))**2/(sum(x["HG",])*sum(x[,"Apr"])/sum(x))
X2LBApr <- (x["LB","Apr"]-(sum(x["LB",])*sum(x[,"Apr"])/sum(x)))**2/(sum(x["LB",])*sum(x[,"Apr"])/sum(x))
X2HGNov <- (x["HG","Nov"]-(sum(x["HG",])*sum(x[,"Nov"])/sum(x)))**2/(sum(x["HG",])*sum(x[,"Nov"])/sum(x))
X2LBNov <- (x["LB","Nov"]-(sum(x["LB",])*sum(x[,"Nov"])/sum(x)))**2/(sum(x["LB",])*sum(x[,"Nov"])/sum(x))
X2 <- X2HGApr + X2LBApr + X2HGNov + X2LBNov
X2
pchisq(X2, df=1, lower.tail=FALSE)
# Verify
chisq.test(x, correct=FALSE)
library(stats4)
yls = c(24, 37, 39, 5)
# MLE without restrctions
pls = yls/sum(yls)
print(pls)
# Likelihood ratio test
plseq = c(0.25, 0.25, 0.25, 0.25)
G = 2*(sum(yls*log(pls)) - sum(yls*log(plseq)))
pchisq(G, df=4, lower.tail=FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(stats4)
neglogL <- function(p) {-logL(p)}
fit <- mle(neglogL, start=0.5, lower=0.001, upper=0.999)
dir()
R version
R --version
array2 <- array(1, dim=c(2,3))
# Show the outputs of this code section
array2
# Show the outputs of this code section
print(array2)
# Show the outputs of this code section
print(array1)
# Create Arrays
array1 <- array(vector1, vector2, vector3)
# Create a vector
vector1 <- c(1, 2, 3)
vector2 <- c(0, 1, 2)
vector3 <- c(0, 0, 1)
# transform
# Refer to elements of a vector using a numeric vector
vector1[1] # Tips: start from 1 rather than 0
vector1[1:2]
vector1[c(1:2)]
vector1[c(1,2,3)]
# Create Arrays
array1 <- array(vector1, vector2, vector3)
# Create Arrays
array1 <- array(c(vector1, vector2, vector3))
array2 <- array(1, dim=c(2,3))
# Show the outputs of this code section
print(array1)
print(array2)
# Check elements/rows/columns of the array
array2[1, 2]
# Check elements/rows/columns of the array
array1[1, 2]
# Create Arrays
array1 <- array(c(vector1, vector2, vector3))
array2 <- array(2, dim=c(2,3))
# Check elements/rows/columns of the array
array1[1, 2] # The first index is row number and the second index is column number
# Check elements/rows/columns of the array
array1[1, 1] # The first index is row number and the second index is column number
# Check elements/rows/columns of the array
array1[, 1] # The first index is row number and the second index is column number
# Check elements/rows/columns of the array
array1[1] # The first index is row number and the second index is column number
# Check elements/rows/columns of the array
array1[2] # The first index is row number and the second index is column number
array[1, 2]# The first index is row number and the second index is column number
array2[1, 2]# The first index is row number and the second index is column number
# Create Arrays
array1 <- array(c(vector1, vector2, vector3))
array2 <- array(2, dim=c(2,3))
# Check elements/rows/columns of the array
array1[2] # if the arrary is 1D, the index should be one as well like vector
array2[1, 2]# The first index is row number and the second index is column number
# Show the outputs of this code section
print(array1)
print(array2)
# Create Arrays
array1 <- array(c(vector1, vector2, vector3))
array2 <- array(2, dim=c(2,3))
# Check elements/rows/columns of the array
array1[2]  # if the arrary is 1D, the index should be one as well like vector
array2[1, 2]  # The first index is row number and the second index is column number
array2[1, ]  # Choose the row
# Show the outputs of this code section
print(array1)
print(array2)
# Create Arrays
array1 <- array(c(vector1, vector2, vector3))
array2 <- array(2, dim=c(2,3))
# Check elements/rows/columns of the array
print("##################### Choose elements/lines from arrays #####################")
array1[2]  # if the arrary is 1D, the index should be one as well like vector
array2[1, 2]  # The first index is row number and the second index is column number
array2[1, ]  # Choose the row
# Show the outputs of this code section
print(array1)
print(array2)
# Check elements/rows/columns of the array
"##################### Choose elements/lines from arrays #####################"
# Create Arrays
array1 <- array(c(vector1, vector2, vector3))
array2 <- array(2, dim=c(2,3))
# Check elements/rows/columns of the array
print("##################### Choose elements/lines from arrays #####################")
array1[2]  # if the arrary is 1D, the index should be one as well like vector
array2[1, 2]  # The first index is row number and the second index is column number
array2[1, ]  # Choose the row
# Show the outputs of this code section
print("##################### Show the Final arrarys #####################")
print(array1)
print(array2)
## Create the array with different
array2 <- arrary(c(1, 2, 3), dim=c(2,3))
## Create the array with different
array2 <- arrary(rep(c(1, 2, 3)), dim=c(2,3))
## Create the array with different
array2 <- array(rep(c(1, 2, 3)), dim=c(2,3))
print(array2)
# Create Arrays
## Create the array with the same numeric elements
print("##################### Methods to create customised arrays #####################")
array0 <- array(2, dim=c(2,3))
## Create the array based on the vectors that you have
array1 <- array(c(vector1, vector2, vector3))
## Create the array with repeated number list and cut the vector into the dimension.
array2 <- array(rep(c(1, 2, 3)), dim=c(2,3))  # You will find that the numbers are cut by columns but not by rows.
# Check elements/rows/columns of the array
print("##################### Choose elements/lines from arrays #####################")
array1[2]  # if the arrary is 1D, the index should be one as well like vector
array2[1, 2]  # The first index is row number and the second index is column number
array2[1, ]  # Choose the row
array2[, 2]  # Choose the column
# Show the outputs of this code section
print("##################### Show the Final arrarys #####################")
print(array1)
print(array2)
# Create Arrays
## Create the array with the same numeric elements
print("##################### Methods to create customised arrays #####################")
array0 <- array(2, dim=c(2,3))
## Create the array based on the vectors that you have
array1 <- array(c(vector1, vector2, vector3))
## Create the array with repeated number list and cut the vector into the dimension.
array2 <- array(rep(c(1, 2, 3)), dim=c(2,3))  # You will find that the numbers are cut by columns but not by rows.
# Check elements/rows/columns of the array
print("##################### Choose elements/lines from arrays #####################")
array1[2]  # if the arrary is 1D, the index should be one as well like vector
array2[1, 2]  # The first index is row number and the second index is column number
# Choose the row(s)
array2[1, ]
array2[c(1, 2), ]  # Specific rows from row 1 and row 2 (Not from row1 to row2)
# Choose the column(s)
array2[, 2]
# Choose the brick combined with rows and columns
# Show the outputs of this code section
print("##################### Show the Final arrarys #####################")
print(array1)
print(array2)
# Create Arrays
## Create the array with the same numeric elements
print("##################### Methods to create customised arrays #####################")
array0 <- array(2, dim=c(2,3))
## Create the array based on the vectors that you have
array1 <- array(c(vector1, vector2, vector3))
## Create the array with repeated number list and cut the vector into the dimension.
array2 <- array(rep(c(1, 2, 3)), dim=c(3,3))  # You will find that the numbers are cut by columns but not by rows.
# Check elements/rows/columns of the array
print("##################### Choose elements/lines from arrays #####################")
array1[2]  # if the arrary is 1D, the index should be one as well like vector
array2[1, 2]  # The first index is row number and the second index is column number
# Choose the row(s)
array2[1, ]
array2[c(1, 2), ]  # Specific rows from row 1 and row 2 (Not from row1 to row2)
# Choose the column(s)
array2[, 2]
# Choose the brick combined with rows and columns
# Show the outputs of this code section
print("##################### Show the Final arrarys #####################")
print(array1)
print(array2)
# Create Arrays
## Create the array with the same numeric elements
print("##################### Methods to create customised arrays #####################")
array0 <- array(2, dim=c(2,3))
## Create the array based on the vectors that you have
array1 <- array(c(vector1, vector2, vector3))
## Create the array with repeated number list and cut the vector into the dimension.
array2 <- array(rep(c(1, 2, 3)), dim=c(3,3))  # You will find that the numbers are cut by columns but not by rows.
# Check elements/rows/columns of the array
print("##################### Choose elements/lines from arrays #####################")
array1[2]  # if the arrary is 1D, the index should be one as well like vector
array2[1, 2]  # The first index is row number and the second index is column number
# Choose the row(s)
array2[1, ]
array2[c(1, 3), ]  # Specific rows from row 1 and row 2 (Not from row1 to row2)
# Choose the column(s)
array2[, 2]
array2[, c(1,3)]
# Choose the brick combined with rows and columns
# Show the outputs of this code section
print("##################### Show the Final arrarys #####################")
print(array1)
print(array2)
# Create Arrays
## Create the array with the same numeric elements
print("##################### Methods to create customised arrays #####################")
array0 <- array(2, dim=c(2,3))
## Create the array based on the vectors that you have
array1 <- array(c(vector1, vector2, vector3))
## Create the array with repeated number list and cut the vector into the dimension.
array2 <- array(rep(c(1, 2, 3)), dim=c(3,3))  # You will find that the numbers are cut by columns but not by rows.
# Check elements/rows/columns of the array
print("##################### Choose elements/lines from arrays #####################")
array1[2]  # if the arrary is 1D, the index should be one as well like vector
array2[1, 2]  # The first index is row number and the second index is column number
# Choose the row(s)
array2[1, ]
array2[c(1, 3), ]  # Specific rows from row 1 and row 2 (Not from row1 to row2)
# Choose the column(s)
array2[, 2]
array2[, c(1,3)]
# Choose the brick combined with rows and columns
array2[c(1, 3), c(1, 2)]
# Show the outputs of this code section
print("##################### Show the Final arrarys #####################")
print(array1)
print(array2)
## Give list names for each elements in the list
ls2 <- list(vec2=vector2, arr2=arrary2)
## Give list names for each elements in the list
ls2 <- list(vec2=vector2, arr2=array2)
# Call the elements by the list name
ls2[["vec2"]]
# Call the elements by the list name
ls2[["arr2"]]
ls2$vec2
# Sample outputs for tests in this code section
var1 = data.frame(array(rep(c(1, 2, 3), 3), dim=c(3, 3)))
print(var1)
View(var1)
# Create Matrices
matrix1 <- matrix(vector1, vector2)
# exit the R workspace
q()
